// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?   @unique
  name      String?
  image     String?
  hashedPassword String?
  likeIds String[] @db.String
  role      String? @default("USER")

  account Account[]
  post    Post[]
  coursePlan CoursePlan[]
}

model Account {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  type     String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postID    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String?
  content   String?
  uploadFiles String[]
  published Boolean @default(false)
  authorName String?
  authorId  String?  @db.ObjectId
  description String?
  coursePlanId String? @db.ObjectId
  views Int @default(0)
  likes Int @default(0)
  parentPostId String?
  parentPostAuthorId String? @db.ObjectId

  user User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coursePlan CoursePlan? @relation(fields: [coursePlanId], references: [id], onDelete: Cascade)
}


model CoursePlan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title     String?
  authorId  String?  @db.ObjectId
  authorName String?

  user User? @relation(fields: [authorId], references: [id], onDelete: Cascade)

  post Post[]
}